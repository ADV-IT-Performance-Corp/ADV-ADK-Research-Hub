---
name: CI Validate O3 Repo v3.5.7

'on':
  pull_request:
  push:
    branches:
      - master
    paths:
      - 'docs/**'
      - '.github/workflows/**'
      - '!docs/legacy/**'  # Exclude legacy files from triggering CI

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Ensure jq and yamllint
        run: |
          if ! command -v jq >/dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          if ! command -v yamllint >/dev/null; then
            sudo apt-get update && sudo apt-get install -y yamllint
          fi

      - name: Lint Markdown files
        run: npx markdownlint-cli2 "docs/**/*.md" "!docs/legacy/**"

      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          jq . docs/source_index.json > /dev/null
          jq . docs/meta/prompt_genome.json > /dev/null
          jq . docs/meta/meta_evaluation.json > /dev/null

      - name: Validate YAML files
        run: |
          echo "Validating YAML files..."
          CONFIG='{ extends: default, rules: {line-length: {max: 120, allow-non-breakable-inline-mappings: true}} }'
          find . -path ./node_modules -prune -o \( \
            -name '*.yaml' -o -name '*.yml' \) -print0 | xargs -0 yamllint -d "$CONFIG"

      - name: Check for TODO, Coming soon, or placeholder
        run: |
          echo "Checking for incomplete work..."
          if grep -RniE 'TODO:|Coming soon|placeholder' docs/ --include="*.md" --include="*.yaml" \
            --include="*.yml" --exclude-dir=legacy; then
            echo "‚ùå Detected incomplete work. Please resolve before merging."
            exit 1
          fi

      - name: Validate Required Files Exist
        run: |
          echo "Checking required files..."
          REQUIRED_FILES=(
            "docs/prompt/prompt_kernel_v3.5.md"
            "docs/meta/prompt_evolution_log/v3.5.yaml"
            "docs/meta/meta_evaluation.json"
            "docs/meta/prompt_genome.json"
            "docs/source_index.json"
            "README.md"
            "CHANGELOG.md"
            "tests/golden_prompts/test_prompt_coordinator.md"
            "tests/golden_prompts/test_memory_reflection.md"
            "tests/golden_prompts/test_kpi_optimization.md"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done

      - name: Check Version Consistency
        run: |
          echo "Checking version consistency..."
          VERSION_IN_README=$(grep -oP 'version-\K[0-9]+\.[0-9]+\.[0-9]+' README.md | head -1)
          VERSION_IN_CHANGELOG=$(grep -oP '## \[v\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -1)

          if [ "$VERSION_IN_README" != "$VERSION_IN_CHANGELOG" ]; then
            echo "‚ùå Version mismatch between README ($VERSION_IN_README) and CHANGELOG ($VERSION_IN_CHANGELOG)"
            exit 1
          else
            echo "‚úÖ Version $VERSION_IN_README is consistent across files"
          fi

      - name: Validate Golden Prompts
        run: |
          echo "Validating golden prompts..."
          for file in tests/golden_prompts/*.md; do
            if [[ $(basename "$file") == "README.md" ]]; then
              continue
            fi
            echo "üîç Validating $file"

            # Check required sections
            for section in "INPUT" "EXPECTED" "NOTES"; do
              if ! grep -q "^### $section" "$file"; then
                echo "‚ùå Missing section: $section in $file"
                exit 1
              fi
            done

            # Check for required tags
            if ! grep -q "^\*\*Tags:\*\*" "$file"; then
              echo "‚ùå Missing or incorrectly formatted Tags in $file. Expected format: **Tags:** value1, value2"
              exit 1
            fi

            # Check for version compatibility
            if ! grep -q "v3\.5" "$file"; then
              echo "‚ùå Version not specified or incorrect in $file"
              exit 1
            fi

            echo "‚úÖ $file is valid"
          done


      - name: Refresh Link Cache
        run: python3 scripts/refresh_link_cache.py

      - name: Offline Link Check
        run: |
          bash scripts/offline_link_check.sh
          test -f docs/performance_marketing/reforge_growth_loops.md
          test -f docs/legacy/prompt/prompt_kernel_v3.4.md
          test -f docs/meta/prompt_genome.json

      - name: Prompt Genome Version Consistency
        run: |
          version=$(jq -r '.versions[] | select(.tag=="v3.4")' docs/meta/prompt_genome.json)
          if [ -z "$version" ]; then
            echo "Missing v3.4 entry in prompt genome."
            exit 1
          fi

      - name: Verify prompt_version matches VERSION
        run: |
          echo "Checking prompt_version consistency..."
          SETTINGS_VERSION=$(grep -oP '^prompt_version:\s*\K[0-9]+\.[0-9]+\.[0-9]+' config/settings.yaml)
          FILE_VERSION=$(tr -d '[:space:]' < VERSION)
          if [ "$SETTINGS_VERSION" != "$FILE_VERSION" ]; then
            echo "‚ùå prompt_version mismatch: settings.yaml ($SETTINGS_VERSION) vs VERSION ($FILE_VERSION)"
            exit 1
          else
            echo "‚úÖ prompt_version $SETTINGS_VERSION matches VERSION"
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests
        run: python -m unittest discover tests
