---
name: CI Validate O3 Repo v3.5.10

'on':
  pull_request:
  push:
    branches:
      - master
    paths:
      - 'docs/**'
      - '.github/workflows/**'
      - '!docs/legacy/**'  # Exclude legacy files from triggering CI

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Prepare environment
        run: bash scripts/setup_env.sh

      - name: Validate commit message prefix
        run: |
          COMMIT_MSG=$(git show -s --format=%B HEAD | head -1)
          AUTHOR=$(git log -1 --pretty=%an)
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "Latest commit message: $COMMIT_MSG"
          echo "Author: $AUTHOR"
          if [[ "$BRANCH_NAME" == hotfix-* ]]; then
            echo "✅ Hotfix branch detected, skipping commit message validation"
            exit 0
          fi
          if [[ "$COMMIT_MSG" =~ ^Merge ]]; then
            echo "✅ Merge commit detected, skipping prefix check"
            exit 0
          fi
          if [[ "$AUTHOR" =~ dependabot.* || "$AUTHOR" == "github-actions" ]]; then
            echo "✅ Commit by $AUTHOR, skipping prefix check"
            exit 0
          fi
          CHECK_REGEX='^(feat|fix|chore(\(release\))?|docs|refactor|test|build|ci|perf|style|revert):'
          if ! echo "$COMMIT_MSG" | scripts/safe_grep.sh -Eqi "$CHECK_REGEX"; then
            echo "❌ Commit message must start with one of:" && \
            echo "feat:, fix:, chore:, docs:, refactor:, test:, build:, ci:, perf:, style:, revert:"
            exit 1
          fi
          echo "✅ Commit message prefix check passed"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        # Unset npm-specific proxy vars so npm doesn't emit warnings. System proxy vars remain for connectivity.
        env:
          npm_config_proxy: ""
          npm_config_http_proxy: ""
          npm_config_https_proxy: ""
        run: |
          npm ci --omit=optional 2>&1 | tee npm.log
          if scripts/safe_grep.sh -qE 'ENETUNREACH|EAI_AGAIN' npm.log; then
              echo "❌ npm network error" >&2
              exit 1
          fi

      # jq and yamllint installed via scripts/setup_env.sh

      - name: Lint Markdown files
        run: |
          npx markdownlint-cli2 "docs/**/*.md" "!docs/legacy/**" "prompt_catalog/**/*.md"
          echo "Markdown lint passed"

      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          jq . docs/source_index.json > /dev/null
          jq . docs/meta/prompt_genome.json > /dev/null
          jq . docs/meta/meta_evaluation.json > /dev/null
          echo "JSON validation passed"

      - name: Validate YAML files
        # Extracted into a script to avoid complex quoting
        run: bash scripts/validate_yaml.sh && echo "YAML lint passed"

      - name: Check for TODO, Coming soon, or placeholder
        # Moved to a script for readability
        run: bash scripts/check_incomplete_work.sh && echo "TODO check passed"

      - name: Validate Required Files Exist
        run: |
          echo "Checking required files..."
          REQUIRED_ALWAYS=(
            "docs/prompt/prompt_kernel_v3.5.md"
            "docs/meta/prompt_evolution_log/v3.5.yaml"
            "docs/meta/meta_evaluation.json"
            "docs/meta/prompt_genome.json"
            "docs/source_index.json"
            "README.md"
            "CHANGELOG.md"
          )
          REQUIRED_RELEASE=(
            "tests/golden_prompts/test_prompt_coordinator.md"
            "tests/golden_prompts/test_memory_reflection.md"
            "tests/golden_prompts/test_kpi_optimization.md"
          )

          BRANCH_NAME="${GITHUB_REF_NAME:-${GITHUB_REF##*/}}"

          for file in "${REQUIRED_ALWAYS[@]}"; do
            echo "Checking $file"
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

          for file in "${REQUIRED_RELEASE[@]}"; do
            echo "Checking $file"
            if [ ! -f "$file" ]; then
              if [ "$BRANCH_NAME" = "master" ]; then
                echo "❌ Missing required release file: $file"
                exit 1
              else
                echo "⚠️ Warning: missing release file: $file" >&2
              fi
            else
              echo "✅ Found: $file"
            fi
          done
          echo "Required files check passed"

      - name: Check Version Consistency
        run: |
          echo "Checking version consistency..."
          VERSION_IN_README=$(scripts/safe_grep.sh -oP 'version-\K[0-9]+\.[0-9]+\.[0-9]+' README.md | head -1)
          VERSION_IN_CHANGELOG=$(scripts/safe_grep.sh -oP '## \[v\K[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -1)

          if [ "$VERSION_IN_README" != "$VERSION_IN_CHANGELOG" ]; then
            echo "❌ Version mismatch between README ($VERSION_IN_README) and CHANGELOG ($VERSION_IN_CHANGELOG)"
            exit 1
          else
            echo "✅ Version $VERSION_IN_README is consistent across files"
          fi
          echo "Version check passed"

      - name: Validate Golden Prompts
        run: bash scripts/validate_golden_prompts.sh && echo "Golden prompts valid"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        env:
          PIP_ROOT_USER_ACTION: ignore
        run: |
          pip install --quiet --progress-bar off -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install --quiet --progress-bar off -r requirements-dev.txt; fi
          pip install --quiet --progress-bar off -e .
          echo "Python dependencies installed"

      - name: Update source index
        run: python scripts/update_source_index.py

      - name: Validate prompt catalog
        run: python scripts/validate_prompt_catalog.py

      - name: Online Link Check
        run: |
          bash scripts/online_link_check.sh
          test -f docs/performance_marketing/reforge_growth_loops.md
          test -f docs/legacy/prompt/prompt_kernel_v3.4.md
          test -f docs/meta/prompt_genome.json
          echo "Link check passed"

      - name: Prompt Genome Version Consistency
        run: |
          version=$(jq -r '.versions[] | select(.tag=="v3.4")' docs/meta/prompt_genome.json)
          if [ -z "$version" ]; then
            echo "Missing v3.4 entry in prompt genome."
            exit 1
          fi
          echo "Prompt genome version check passed"

      - name: Verify version consistency across files
        run: bash scripts/validate_versions.sh && echo "Version files in sync"


      - name: Run flake8
        run: flake8 && echo "flake8 passed"

      - name: Run black check
        run: black --check . && echo "black formatting passed"

      - name: Run mypy
        run: mypy o3research && echo "mypy passed"


      - name: Run unit tests with coverage
        run: |
          coverage run -m pytest
          coverage xml
          coverage report --fail-under=80
          echo "Tests passed"

      - name: Generate coverage badge
        env:
          PIP_ROOT_USER_ACTION: ignore
        run: |
          pip install --quiet --progress-bar off coverage-badge
          coverage-badge -o coverage.svg -f

      - name: Update evaluation results
        run: python scripts/generate_evaluation.py tests/sample_metrics.json && echo "Evaluation results updated"
      - name: Codex validation
        run: codex validate
      - name: Verify script output limit
        run: |
          for s in scripts/*.sh scripts/*.py; do
            echo "Checking $s"
            if ! scripts/safe_grep.sh -q 'head -c 1600' "$s" && ! scripts/safe_grep.sh -q 'limit_output' "$s"; then
              echo "❌ Missing output limit in $s" >&2
              exit 1
            fi
          done
          echo "Script output limit enforced"
      - name: check-line-length
        run: |
          set -o pipefail
          {
            bash scripts/check_incomplete_work.sh
            bash scripts/validate_yaml.sh
          } | tee line.log
          max_len=$(wc -L < line.log)
          echo "Max line length: $max_len"
          if [ "$max_len" -gt 1600 ]; then
            echo "❌ Line length $max_len exceeds limit" >&2
            exit 1
          fi
          echo "Line length check passed"
